---

#
# Security Groups
#

# FIXME: This will remove the default allow all traffic inbound for some reason?
# Get the default security group id b/c the api load balancer needs it
- name: get default security group facts 
  ec2_group:
    name: "default"
    description: "default VPC security group"
    vpc_id: "{{ vpc_network_id }}"
    region: "{{ aws_region }}" 
    rules:
      - proto: all
        from_port: -1
        to_port: -1
        group_name: "default"
  register: ec2_group_default

- set_fact:
    vpc_default_security_group_id: "{{ ec2_group_default.group_id }}" 

- debug:
    var: vpc_default_security_group_id
    verbosity: 2

# NOTE: Unfortunately there does not seem to be an ec2_group_facts
# module, so this will actually create the rule if it doesn't exist
# as opposed to just getting information. But we need the group_id
# when creating instances.
- name: setup k8s ec2 security group and rules
  ec2_group:
    name: "{{ vpc_security_group_name }}" 
    description: "allow rules for k8s"
    vpc_id: "{{ vpc_network_id }}"
    region: "{{ aws_region }}"
    rules:
      # Allow port 80 for k8s deployments/services 
      # FIXME: should be a different security group
      - proto: tcp 
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      # Allow ssh to util node
      - proto: tcp 
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      # 443 to k8s api loadbalancer
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      # ping for util node
      - proto: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
  register: ec2_group_k8s_allow 

- debug:
    var: ec2_group_k8s_allow 
    verbosity: 2

- set_fact:
    vpc_security_group_id: "{{ ec2_group_k8s_allow.group_id }}"

# Since ec2_group does not seem to support tags, we have to add 
# it in a second step using ec2_tag. Without this it won't know
# what security group to assign to the ELB.
- name: tag k8s ec2 security group with KubernetesCluster name
  ec2_tag:
    region: "{{ aws_region }}"
    resource: "{{ vpc_security_group_id }}"
    state: present
    tags: { KubernetesCluster: "{{ k8s_cluster_name }}" }
